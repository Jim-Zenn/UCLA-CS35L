First I write `tr2b.c` and `tr2u.c`.
The two programs have a very similar structure. They have the same basic check,
namely:
  1. check if there are exactly 2 operands: `from` and `to`.
  2. check if `from` and `to` have the same length.
  3. check if `from` has duplicate characters.
Then the two program starts two differ.
  `tr2b` uses buffered I/O, namely, `getchar` and `putchar` from `stdio.h`.
  `tr2u` uses unbuffered I/O, namely, `read` and `write` from `unistd.h`.
To test the efficiency of the two programs, we generate a file that contains
5000000 bytes. To generate such a file we use the following command:
  ``` shell
  head --bytes=5000000 /dev/urandom > tr_test.txt
  ```
We then use `strace` with '-c' option. It provides following functionalities.
  ``` man-page
      ...
       -c          Count time, calls, and errors for each system call
                   and  report  a summary on program exit.  On Linux,
                   this attempts to show system time (CPU time  spent
                   running  in  the kernel) independent of wall clock
                   time.
      ...
  ```
We first do experiment (a) : copying one file to another
  tr2b:
    ``` shell
    strace -c ./tr2b abc 123 < tr_test.txt > tr_out.txt
    ```
    And we get
    ``` log
      % time     seconds  usecs/call     calls    errors syscall
      ------ ----------- ----------- --------- --------- ----------------
       26.51    0.000224          25         9           mmap
       17.04    0.000144          36         4           mprotect
       11.12    0.000094          24         4           fstat
        9.23    0.000078          78         1           munmap
        7.46    0.000063          32         2           open
        7.22    0.000061          31         2           read
        5.80    0.000049          49         1           write
        4.62    0.000039          20         2           close
        4.14    0.000035          35         1         1 access
        3.43    0.000029          29         1           execve
        2.25    0.000019          19         1           arch_prctl
        1.18    0.000010          10         1           brk
      ------ ----------- ----------- --------- --------- ----------------
      100.00    0.000845                    29         1 total
    ```
    There are a total of 29 calls.

  tr2u:
    ``` shell
    strace -c ./tr2u abc 123 < tr_test.txt > tr_out.txt
    ```
    And we get
    ``` log
    % time     seconds  usecs/call     calls    errors syscall
    ------ ----------- ----------- --------- --------- ----------------
     56.15   31.647154           6   5000000           write
     43.85   24.714933           5   5000002           read
      0.00    0.000169          24         7           mmap
      0.00    0.000114          29         4           mprotect
      0.00    0.000087          87         1           munmap
      0.00    0.000059          30         2           open
      0.00    0.000045          23         2           close
      0.00    0.000034          34         1           execve
      0.00    0.000020          10         2           fstat
      0.00    0.000016          16         1           arch_prctl
      0.00    0.000009           9         1         1 access
      0.00    0.000005           5         1           brk
    ------ ----------- ----------- --------- --------- ----------------
    100.00   56.362645              10000024         1 total
    ```
    There are a total of 10000024 calls.

We now do experiment (b) : copying a file to the terminal
  tr2b:
    ``` shell
    strace -c ./tr2b abc 123 < tr_test.txt
    ```
    And we get
    ``` log
    % time     seconds  usecs/call     calls    errors syscall
    ------ ----------- ----------- --------- --------- ----------------
     31.76    0.000256          28         9           mmap
     19.11    0.000154          39         4           mprotect
     11.41    0.000092          92         1           munmap
     11.17    0.000090          45         2           open
      5.83    0.000047          47         1         1 access
      5.33    0.000043          22         2           close
      4.84    0.000039          10         4           fstat
      2.98    0.000024          12         2           read
      2.73    0.000022          22         1           arch_prctl
      2.61    0.000021          21         1           execve
      2.23    0.000018          18         1           brk
      0.00    0.000000           0         2           write
    ------ ----------- ----------- --------- --------- ----------------
    100.00    0.000806                    30         1 total
    ```
    There are a total of 29 calls.

  tr2u:
    ``` shell
    strace -c ./tr2u abc 123 < tr_test.txt
    ```
    And we get
    ``` log
    % time     seconds  usecs/call     calls    errors syscall
    ------ ----------- ----------- --------- --------- ----------------
     55.07   24.243788           5   5000000           write
     44.93   19.776893           4   5000002           read
      0.00    0.000026          26         1           arch_prctl
      0.00    0.000025           6         4           mprotect
      0.00    0.000013          13         1           munmap
      0.00    0.000000           0         2           open
      0.00    0.000000           0         2           close
      0.00    0.000000           0         2           fstat
      0.00    0.000000           0         7           mmap
      0.00    0.000000           0         1           brk
      0.00    0.000000           0         1         1 access
      0.00    0.000000           0         1           execve
    ------ ----------- ----------- --------- --------- ----------------
    100.00   44.020745              10000024         1 total
    ```
    There are a total of 10000024 calls.

Finally, we use `time` to directly compare the speed of `tr2b` and `tr2u`.
  tr2b: copy from file to file
    ``` shell
    time ./tr2b abc 123 < tr_test.txt > tr_out.txt
    ```
    ``` log
    real    0m0.012s
    user    0m0.000s
    sys     0m0.003s
    ```
  tr2u: copy from file to file
    ``` shell
    time ./tr2u abc 123 < tr_test.txt > tr_out.txt
    ```
    ``` log
    real    0m11.299s
    user    0m1.421s
    sys     0m9.811s
    ```
  tr2b: copy from file to terminal
    ``` shell
    time ./tr2b abc 123 < tr_test.txt
    ```
    ``` log
    real    0m0.002s
    user    0m0.000s
    sys     0m0.001s
    ```
  tr2u: copy from file to terminal
    ``` shell
    time ./tr2u abc 123 < tr_test.txt
    ```
    ``` log
    real	1m17.778s
    user	0m1.470s
    sys	0m8.899s
    ```

Overall, the performance of tr2b crushes that of tr2u. This is a clear 
indication that buffered I/O is a much better solution comparing to unbuffered 
I/O.

Homework:

time ./sfrob < 5m.txt > /dev/null
  real    0m0.363s
  user    0m0.321s
  sys     0m0.041s

time ./sfrobs < 5m.txt > /dev/null
  real    0m0.031s
  user    0m0.023s
  sys     0m0.020s

time ./sfrobs -f < 5m.txt > /dev/null
  real    0m0.032s
  user    0m0.024s
  sys     0m0.019s

time ./sfrobu < 5m.txt > /dev/null
  real    0m1.042s
  user    0m1.324s
  sys     0m1.322s
