## Notations

<SP>: space
<CR>: Carriage return / Enter
<BS>: Backspace
<C->: Control key
<M->: Meta key

* If surrounded by backticks '`', it's a shell command. Just enter and execute it directly in shell.

PLEASE READ THE NOTATIONS ABOVE BEFORE YOU PROCEED!


## Exercise 1.1: Moving around in Emacs

1.  `emacs exer1.html`
2.  <C-s> H T M L <CR>
3.  <C-s> s c a v e n g e r <CR> <M-b>
4.  <C-s> s e l f - r e f <CR> <M-b> <M-b>
5.  <C-s> a r r o w <CR> <M-b>
6.  <C-e>
7.  <C-a>
8.  I moved around using Emacs commands.
9.  I moved around using Emacs commands.
10. <C-x> <C-c>


## Exercise 1.2: Deleting text in Emacs

1.  `emacs exer2.html`
2.  <M-g> g 1 8 <CR> <C-k>
3.  <C-s> D E <C-a> <C-k>
4.  <C-s> w i k i p <C-s> <C-p> <C-a> <C-u> 3 <C-k>
5.  <C-s> < ! - <C-u> 3 <C-b> <C-u> 7 <C-d>
    <C-s> <C-s> <C-a> <C-u> 4 <C-k>
    <C-s> <C-s> <C-a> <C-k>
6.  `diff -u exer1.html exer2.html > exer2.diff`


## Exercise 1.3: Inserting text in Emacs

1.  `emacs exer3.html`
2.  <M-%> m e n t <SP> 1 <CR> m e n t <SP> 4 2 <CR> y y
3.  <M-<> <M-%> U T F - 8 <CR> U T F - A S C I I <CR> y
4.  <M-<> <C-M-s> [ ^ [ : a s c i i : ] ] <C-a> <C-k>
5.  <M-<> <C-s> < / o l > <CR> <CR>
6.  `diff -u exer1.html exer3.html > exer3.diff`


## Exercise 1.4: Other editing tasks in Emacs

1.  `cat exer2.html exer2.diff > exer4.html`
2.  `emacs exer4.html`
34. <M->> <C-r> < ! - <C-SP> <C-e> <M-w>
    <C-r> < / h t m l > <C-r> <C-e> <CR> <C-y>
    <M->> <C-r> < ! - <C-r> <C-SP> <C-e> <M-w> <C-x> <C-x>
    <C-n> <C-SP> <C-e> <M-w> <C-x> <C-x>
    <C-n> <C-SP> <C-e> <M-w> <C-x> <C-x>
    <C-n> <C-SP> <C-e> <M-w>
    <C-r> s h o u l d <SP> o <C-r> <C-e> <CR>
    <C-y> <C-u> 3 <M-y> <CR>
    <C-y> <C-u> -1 <M-y> <CR>
    <C-y> <C-u> -1 <M-y> <CR>
    <C-y> <C-u> -1 <M-y> <CR>
    <M->> <C-r> < ! - <C-r> <C-r> <C-SP> <C-u> 7 <C-f> <M-w>
    <C-r> n o t h i n g <C-r> <M-f> <C-y> <CR>
    <M->> <C-r> < ! - <C-r> <C-r> <C-r> <C-SP> <C-u> 3 <C-n> <M-w>
    <C-r> S u b m i t < / h 2 > <C-r> <C-n> <C-n> <C-y> <C-p> <BS> <C-p> <BS>
    <M->> <C-r> < ! - <C-r> <C-r> <C-r> <C-r> <C-SP> <C-e> <M-w>
    <C-r> H o m e w o r k <C-r> <C-n> <C-n> <C-y>
    <M->> <C-r> < ! - <C-r> <C-r> <C-r> <C-r> <C-r> <C-SP> <C-e> <M-w>
    <C-r> L a b o r a t o r y <C-r> <C-n> <C-n> <C-y>
5.  <M->> <C-SP> <C-r> e n d <SP> o f <C-r> <C-n> <C-w>
6.  <C-->
7.  <CR> < ! - - <C-x> <C-x> - - >
8.  <M-<> <M-%> < o l > <CR> < o L > !            // Replaced 7 occurrences
9.  `diff -u exer1.html exer4.html > exer4.diff`


## Exercise 1.5: Doing commands in Emacs

0.  `emacs`
1.  <M-x> m a k e - d i r e c t o r y <CR> ~ / j u n k <CR>
2.  <C-x> <C-f> ~ / j u n k / h e l l o . c <CR>
    (Enter the program)
3.  <M-x> c o m p i l e 
    (clear the minibuffer)
    g 3 1 <SP> h e l l o . c <SP> - o <SP> h e l l o <CR> y
    <C-x> b h e l l o - o u t <CR> <C-u> <M-!> . / h e l l o <CR>
    <C-SP> <M->> <M-w> <C-x> <C-f> k e y 1 . t x t <M->> C-y
#include <stdio.h
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}


## Exercise 1.6: Running Elisp Code

1.  `emacs` <C-x> b <CR> 
2.  ( r a n d o m <SP> " 1 2 3 - 4 5 6 - 7 8 9 " ) <C-j>   // output: -7711700448556449
3.  ( s e t q <SP> x <SP> ( r a n d o m ) ) <C-j>  // output: -1153038529041916913
    ( s e t q <SP> y <SP> ( r a n d o m ) ) <C-j>  // output: -906672388738810302
4.  ( * x y ) <C-j>  // output: -2057086950941024802 (Overflow, not mathematically correct.)
5.  <M-:> ( * x y ) <CR>  // output: -2057086950941024802 (#o215636045045104316736, #x2373c25129119dde) (Returns three forms of the answer: decimal, octal and hexadecimal. However, none of them are correct)
6.  No, they are not truly random in the mathematical sense. Quote, "A series of pseudo-random numbers is generated in a deterministic fashion. The numbers are not truly random, but they have certain properties that mimic a random series." Reference: https://www.gnu.org/software/emacs/manual/html_node/elisp/Random-Numbers.html
7.  Assume this is a 8-bit machine; the two numbers are signed integers represented as two's complement in the machine. 
    (Recording all the keystokes really exhausted me. Hence, I really don't want to do more math, so I wrote a brute force python program to find out. The code is as below. Given number of bits, it calculates the possibility of multiplication overflow.)
    ``` python
    from bitstring import Bits
    NBITS = int(input("How many bits?\n"))
    total, count = 0, 0
    for a in range(-2**(NBITS - 1), 2**(NBITS - 1)):
        for b in range(-2**(NBITS - 1), 2**(NBITS - 1)):
            total += 1
            try:
                Bits(int=a * b, length=NBITS)
            except Exception as e:  # The product can't fit into a NBITS long memory
                count += 1
    print(total, count, count / total)
    ```
    Out of 65536 possible multiplication, there are 62463 product overflows (can't be represented as a 8-bit binary). This yields possibility of about 0.9531097412109375. For a machine with more bits, the possibility of overflowing exponentially converges to ~ 100%. According to [Emacs doc 3.1 Interger basics](https://www.gnu.org/software/emacs/manual/html_node/elisp/Integer-Basics.html) most positive fix-point numbers are Typical values are 2**29 − 1 on 32-bit and 2**61 − 1 on 64-bit platforms; most negative fix-point numbers are −2**29 on 32-bit and −2**61 on 64-bit platforms. In this case, the product of two true random numbers would almost always overflow (i.e. mathematically incorrect everytime).
